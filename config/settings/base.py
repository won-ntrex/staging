"""
Django settings for ntrexproject project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import environ

#from logging.handlers import TimedRotatingFileHandler
from concurrent_log_handler import ConcurrentRotatingFileHandler

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.main',
    'apps.stocks',
    'apps.members',
    'common',
    'debug_toolbar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'common.middleware.member.LoginRequiredMiddleware',  # 커스텀 미들웨어 추가 - 사이트 전체에 로그인후에  사용 가능하도록 하기 위함.
    #'debug_toolbar.middleware.DebugToolbarMiddleware',
    #'common.middleware.logging.RequestLoggingMiddleware', # 커스텀 미들웨어 추가 - 로그 처리
    'common.middleware.logging.AccessLogMiddleware',
]

# 내부 IP 설정
INTERNAL_IPS = ['127.0.0.1']

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':  [BASE_DIR / 'templates'],  # '+' 연산자 대신 '/' 연산자 사용 # 또는 os.path.join(BASE_DIR, 'templates')
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'common.context_processors.site_settings',  # 추가
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# 데이터베이스는 dev.py, prod.py에서 override
DATABASES = {}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ko'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/assets/'
STATIC_ROOT = os.path.join(BASE_DIR, 'assets')

# 각 앱의 static 파일을 찾을 추가 경로 설정
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static_files'),  # 프로젝트 레벨 static 파일
]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#로그 디렉토리 생성
LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# 로깅 설정
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Django 기본 로거 사용 유지
    #형식 지정
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {name} | [{pathname} : {lineno}] | {message}',
            'style': '{',
        },
    },
    #방식 지정
    'handlers': {
        'console': {  # 콘솔 출력용
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'debug': {  # 파일 저장용
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'debug.log'),  # 로그 저장 경로
            'formatter': 'verbose',
            'when': 'midnight',              # 매일 자정마다 새 파일 생성
            'backupCount': 7,                # 최근 7일치 보관
            'encoding': 'utf-8',
        },
        'custom': {  # 파일 저장용
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            #'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'custom.log'),  # 로그 저장 경로
            'formatter': 'verbose',
            'when': 'midnight',              # 매일 자정마다 새 파일 생성
            'backupCount': 7,                # 최근 7일치 보관
            'encoding': 'utf-8',
        },
    },
    #적용 대상
    'loggers': {
        'django': {
            #'handlers': ['console', 'file'],  # 콘솔과 파일 둘 다 출력 - 위에 정의된 handler
            'handlers': ['custom'],
            'level': 'INFO',
            'propagate': False, #이 로거가 처리한 로그 메시지를 상위 로거에도 전달 할지 설정 true : 전달 false : 미전달
        },
        'django.server': { #이 설정이 없으면 custom에 함께 표시됨
            'handlers': ['debug'],
            'level': 'ERROR',  # ERROR도 기록 안 되게
            'propagate': False,
        },
        'django.utils.autoreload': { #이 설정이 없으면 custom에 함께 표시됨
            'handlers': ['debug'],
            'level': 'ERROR',  # ERROR도 기록 안 되게
            'propagate': False,
        },
        'django.request': { #이 설정이 없으면 custom에 함께 표시됨
            'handlers': ['debug'],
            'level': 'ERROR',  # ERROR도 기록 안 되게
            'propagate': False,
        },
        'common': {  # common 앱 로거 추가
            'handlers': ['console', 'custom'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}    

LOGIN_URL = '/members/login/'  # 로그인 URL 설정

# 로그인 성공후 이동하는 URL
LOGIN_REDIRECT_URL = '/'

# 예: 세션을 30분(1800초) 후에 만료
SESSION_COOKIE_AGE = 1800  # 초 단위

#false일 경우 브라우저를 꺼도 세션이 유지 True일 경우 닫으면 종료
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# True일 경우 사용자가 요청할 때마다 세션 만료 시간이 갱신
SESSION_SAVE_EVERY_REQUEST = True

#파일 업로드후에 웹에 게시할 경로 설정
MEDIA_URL = '/media/'
#파일 업로드 실제 경로
MEDIA_ROOT = BASE_DIR / 'uploads'

# 커스텀 사용자 모델 설정
#AUTH_USER_MODEL = 'common.NiMember'

#csrf 오류시에 호출할 view 명시
CSRF_FAILURE_VIEW = 'common.utils.csrf_failure.csrf_failure'

# Email backend for development (console)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# 보안 관련 설정 강화
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
#SECURE_SSL_REDIRECT = True # HTTPS 강제
SECURE_HSTS_SECONDS = 31536000 # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'
SECURE_CONTENT_TYPE_NOSNIFF = True